'''

2시 54분 시작

2*n타일링은 타일 2개로 채워나가는 문제이고 바닥공사 문제와 유사하다.

가로를 기준으로 생각해야한다. ( 세로의 크기는 항상 2로 정해져있기 때문. )

1. 1칸을 남긴 나머지가 이미 왼쪽부터 채워져있다고 가정 -> 1가지 경우가 존재한다. 따라서 2*(n-1)타일링을 했을 경우의 수와 만들 수 있는 경우가 동일하다.
2. 2칸을 남긴 나머지가 이미 왼쪽부터 채워져있다고 가정 -> 2*1 타일을 2개 만드는 경우는 이미 1번에서 고려되기에 빼고 생각해야하고 이로써, 2칸을 만들 수 있는 경우도 이전 2*( n-2) 경우의 수와 동일하다.

tile이라는 list를 만들어서 n을 tile index로 구분하여 저장하고 dp를 사용.
<rule>
list[1] = 1
list[2] = 2
list[3] = list[2] + list[1] = 3

<런티임에러>
100%를 넘기고 런타임에러가 났다.

n을 입력받아서 n+1을 해준 값으로 sizing을 해준것과 1001로 해준것의 차이가 뭐지....?

'''

n = int(input())

tile = [0]*1001
tile[1] = 1
tile[2] = 2

for i in range(3,n+1):
    tile[i] = tile[i-1]+tile[i-2]

print(tile[n]%(10007))